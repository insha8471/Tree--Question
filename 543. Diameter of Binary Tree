
//T.c : O(N*2)
//S.c : O(N) //stack space..

class Solution {
    public int height(TreeNode root){
        if(root == null || root.left == null && root.right == null)
            return 0;
        int left = height(root.left);
        int right =  height(root.right);

        return Math.max(left, right) + 1;
    }
    public int diameterOfBinaryTree(TreeNode root) {
        if(root == null || root.left == null && root.right == null) return 0;
        int leftDiam = diameterOfBinaryTree(root.left);
        int rightDiam = diameterOfBinaryTree(root.right);
        int mid = height(root.left) + height(root.right);
        if(root.left != null) mid++;
        if(root.right != null) mid++;
        return Math.max(leftDiam, Math.max(rightDiam, mid));
    }
}
